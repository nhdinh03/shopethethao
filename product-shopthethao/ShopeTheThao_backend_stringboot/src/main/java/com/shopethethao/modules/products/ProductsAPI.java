package com.shopethethao.modules.products;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.shopethethao.dto.ResponseDTO;
import com.shopethethao.modules.productSizes.ProductSize;
import com.shopethethao.modules.productSizes.ProductSizeDAO;

@RestController
@RequestMapping("/api/products")
public class ProductsAPI {

    @Autowired
    private ProductsDAO productsDAO;

    @Autowired
    private ProductSizeDAO productSizeDAO;

    // L·∫•y to√†n b·ªô danh s√°ch s·∫£n ph·∫©m (kh√¥ng ph√¢n trang)
    @GetMapping("/get/all")
    public ResponseEntity<List<Product>> findAll() {
        List<Product> products = productsDAO.findAll();
        return ResponseEntity.ok(products);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Product> getProductById(@PathVariable Integer id) {
        Optional<Product> product = productsDAO.findByIdWithSizes(id);
        return product.isPresent() ? ResponseEntity.ok(product.get()) : ResponseEntity.notFound().build();
    }

    // L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ ph√¢n trang
    @GetMapping
    public ResponseEntity<?> findAll(@RequestParam("page") Optional<Integer> pageNo,
            @RequestParam("limit") Optional<Integer> limit) {
        try {
            if (pageNo.isPresent() && pageNo.get() == 0) {
                return new ResponseEntity<>("Trang kh√¥ng t·ªìn t·∫°i", HttpStatus.NOT_FOUND);
            }
            Sort sort = Sort.by(Sort.Order.desc("id"));
            Pageable pageable = PageRequest.of(pageNo.orElse(1) - 1, limit.orElse(10), sort);
            Page<Product> page = productsDAO.findAll(pageable);
            ResponseDTO<Product> responseDTO = new ResponseDTO<>();
            responseDTO.setData(page.getContent());
            responseDTO.setTotalItems(page.getTotalElements());
            responseDTO.setTotalPages(page.getTotalPages());
            return ResponseEntity.ok(responseDTO);
        } catch (Exception e) {
            return new ResponseEntity<>("Server error, vui l√≤ng th·ª≠ l·∫°i sau!", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // **Th√™m m·ªõi s·∫£n ph·∫©m**
    @PostMapping
    public ResponseEntity<?> createProductWithSizes(@RequestBody Product product) {
        try {
            Product savedProduct = productsDAO.save(product);
            if (product.getSizes() != null && !product.getSizes().isEmpty()) {
                for (ProductSize size : product.getSizes()) {
                    size.setProduct(savedProduct);
                    productSizeDAO.save(size);
                }
            }
            return ResponseEntity.ok(savedProduct);
        } catch (Exception e) {
            return new ResponseEntity<>("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m!", HttpStatus.BAD_REQUEST);
        }
    }

    // **C·∫≠p nh·∫≠t s·∫£n ph·∫©m v√† k√≠ch c·ª°**
    @PutMapping("/{id}")
    @Transactional
    public ResponseEntity<?> updateProduct(@PathVariable("id") Integer id, @RequestBody Product product) {
        try {
            Optional<Product> existingProduct = productsDAO.findById(id);
            if (existingProduct.isEmpty()) {
                return new ResponseEntity<>("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!", HttpStatus.NOT_FOUND);
            }

            Product updatedProduct = existingProduct.get();
            updatedProduct.setName(product.getName());
            updatedProduct.setQuantity(product.getQuantity());
            updatedProduct.setPrice(product.getPrice());
            updatedProduct.setDescription(product.getDescription());
            updatedProduct.setStatus(product.isStatus());
            updatedProduct.setImage1(product.getImage1());
            updatedProduct.setImage2(product.getImage2());
            updatedProduct.setCategorie(product.getCategorie());

            // **X√≥a to√†n b·ªô size tr∆∞·ªõc khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m**
            productSizeDAO.deleteByProductId(id);

            // **N·∫øu `sizes` t·ªìn t·∫°i trong request, c·∫≠p nh·∫≠t l·∫°i size m·ªõi**
            if (product.getSizes() != null && !product.getSizes().isEmpty()) {
                for (ProductSize size : product.getSizes()) {
                    size.setProduct(updatedProduct);
                    productSizeDAO.save(size);
                }
            }

            productsDAO.save(updatedProduct);
            return ResponseEntity.ok(updatedProduct);
        } catch (Exception e) {
            return new ResponseEntity<>("L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau!", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // **X√≥a s·∫£n ph·∫©m v√† size li√™n quan**
    @DeleteMapping("/{id}")
    @Transactional
    public ResponseEntity<?> deleteProduct(@PathVariable("id") Integer id) {
        try {
            if (!productsDAO.existsById(id)) {
                return new ResponseEntity<>("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!", HttpStatus.NOT_FOUND);
            }

            // üõ†Ô∏è X√≥a t·∫•t c·∫£ size c·ªßa s·∫£n ph·∫©m tr∆∞·ªõc khi x√≥a s·∫£n ph·∫©m
            productSizeDAO.deleteByProductId(id);

            // üõ†Ô∏è Sau ƒë√≥ m·ªõi x√≥a s·∫£n ph·∫©m
            productsDAO.deleteById(id);

            return ResponseEntity.ok("X√≥a s·∫£n ph·∫©m v√† size th√†nh c√¥ng!");
        } catch (DataIntegrityViolationException e) {
            return new ResponseEntity<>("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m do d·ªØ li·ªáu tham chi·∫øu!", HttpStatus.CONFLICT);
        } catch (Exception e) {
            return new ResponseEntity<>("Server error, vui l√≤ng th·ª≠ l·∫°i sau!", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}
