package com.shopethethao.modules.categories;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.shopethethao.dto.ResponseDTO;
import com.shopethethao.modules.products.ProductsDAO;

@RestController
@RequestMapping("/api/categories")
public class CategorieAPI {

    @Autowired
    private CategorieDAO dao;

    @Autowired
    private ProductsDAO productsDAO;

    // L·∫•y to√†n b·ªô danh m·ª•c (kh√¥ng ph√¢n trang)
    @GetMapping("/get/all")
    public ResponseEntity<List<Categorie>> findAll() {
        List<Categorie> categories = dao.findAll();
        return ResponseEntity.ok(categories);
    }

    // L·∫•y danh s√°ch danh m·ª•c c√≥ ph√¢n trang
    @GetMapping
    public ResponseEntity<?> findAll(@RequestParam("page") Optional<Integer> pageNo,
            @RequestParam("limit") Optional<Integer> limit) {
        try {
            if (pageNo.isPresent() && pageNo.get() == 0) {
                return new ResponseEntity<>("Trang kh√¥ng t·ªìn t·∫°i", HttpStatus.NOT_FOUND);
            }
            Sort sort = Sort.by(Sort.Order.desc("id"));
            Pageable pageable = PageRequest.of(pageNo.orElse(1) - 1, limit.orElse(10), sort);
            Page<Categorie> page = dao.findAll(pageable);
            ResponseDTO<Categorie> responseDTO = new ResponseDTO<>();
            responseDTO.setData(page.getContent());
            responseDTO.setTotalItems(page.getTotalElements());
            responseDTO.setTotalPages(page.getTotalPages());
            return ResponseEntity.ok(responseDTO);
        } catch (Exception e) {
            return new ResponseEntity<>("Server error, vui l√≤ng th·ª≠ l·∫°i sau!", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // **Th√™m m·ªõi danh m·ª•c**
    @PostMapping
    public ResponseEntity<?> create(@RequestBody Categorie category) {
        try {
            Categorie savedCategory = dao.save(category);
            return ResponseEntity.ok(savedCategory);
        } catch (Exception e) {
            return new ResponseEntity<>("Kh√¥ng th·ªÉ th√™m danh m·ª•c!", HttpStatus.BAD_REQUEST);
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateCategory(@PathVariable("id") Integer id,
            @RequestBody Categorie categorie) {
        try {
            // üîπ Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
            Optional<Categorie> existingCategory = dao.findById(id);
            if (existingCategory.isEmpty()) {
                return new ResponseEntity<>("Danh m·ª•c kh√¥ng t·ªìn t·∫°i!", HttpStatus.NOT_FOUND);
            }

            // üîπ Ki·ªÉm tra xem t√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i ch∆∞a (kh√¥ng t√≠nh ch√≠nh n√≥)
            Optional<Categorie> duplicateCategory = dao.findByName(categorie.getName());
            if (duplicateCategory.isPresent() && !duplicateCategory.get().getId().equals(id)) {
                return new ResponseEntity<>("T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i!", HttpStatus.CONFLICT);
            }

            // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin danh m·ª•c
            Categorie updatedCategorie = existingCategory.get();
            updatedCategorie.setName(categorie.getName());
            updatedCategorie.setDescription(categorie.getDescription());

            dao.save(updatedCategorie);
            return ResponseEntity.ok(updatedCategorie);
        } catch (Exception e) {
            return new ResponseEntity<>("Server error, vui l√≤ng th·ª≠ l·∫°i sau!", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteCategory(@PathVariable("id") Integer id) {
        try {
            // üî• Ki·ªÉm tra xem danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
            if (!dao.existsById(id)) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body("Danh m·ª•c kh√¥ng t·ªìn t·∫°i!");
            }

            // üî• Ki·ªÉm tra xem danh m·ª•c c√≥ s·∫£n ph·∫©m li√™n quan kh√¥ng
            if (productsDAO.existsByCategorieId(id)) {
                return ResponseEntity.status(HttpStatus.CONFLICT)
                        .body("Kh√¥ng th·ªÉ x√≥a danh m·ª•c v√¨ c√≥ s·∫£n ph·∫©m li√™n quan!");
            }

            // ‚úÖ X√≥a danh m·ª•c n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m li√™n quan
            dao.deleteById(id);
            return ResponseEntity.ok("X√≥a danh m·ª•c th√†nh c√¥ng!");

        } catch (DataIntegrityViolationException e) {
            return ResponseEntity.status(HttpStatus.CONFLICT)
                    .body("Kh√¥ng th·ªÉ x√≥a danh m·ª•c do d·ªØ li·ªáu tham chi·∫øu!");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("L·ªói kh√¥ng x√°c ƒë·ªãnh khi x√≥a danh m·ª•c!");
        }
    }

}
